<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Aventuras Compartida</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=VT323&display=swap" rel="stylesheet">
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            margin: 0;
            background-color: #000000;
            font-family: 'VT323', monospace;
            color: #ffffff;
            padding-bottom: 70px;
            box-sizing: border-box;
            position: relative;
            overflow-x: hidden;
            /* Fondo de grid */
            background-image:
                linear-gradient(to right, rgba(128, 128, 128, 0.3) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(128, 128, 128, 0.3) 1px, transparent 1px);
            background-size: 40px 40px;
            background-position: 0 0, 0 0;
        }
        header {
            text-align: center;
            margin-bottom: 1rem;
            padding-top: 1rem;
            width: 100%;
        }
        header h1 {
            font-size: 2.5rem; /* Ajuste para pantallas más pequeñas */
            color: #ff69b4;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 8px rgba(255, 105, 180, 0.8);
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
            line-height: 1.2;
        }
        header h1 span {
            text-decoration: underline;
        }
        header p {
            font-size: 0.8rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
        }
        main {
            width: 95%;
            max-width: 400px;
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #task-input {
            padding: 0.7rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            width: 100%;
            margin-right: 0;
            margin-bottom: 0.5rem;
            border: 2px solid #6ee7b7;
            border-radius: 0.25rem;
            background-color: #1f2937;
            color: #ffffff;
            font-family: 'VT323', monospace;
            box-sizing: border-box;
        }
        #add-task-button {
            padding: 0.7rem 1.5rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            background-color: #6ee7b7;
            color: #ffffff;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-family: 'VT323', monospace;
            width: 100%;
            box-sizing: border-box;
            color: #ff69b4;
            text-shadow: 0 0 8px rgba(255, 105, 180, 0.8);
        }
        #add-task-button:hover {
            background-color: #14b8a6;
        }
        #task-list-container {
            width: 100%;
            margin-top: 1rem;
            margin-bottom: 4rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #task-list {
            list-style: none;
            padding: 0;
            width: 100%;
        }
        #task-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.9rem 1.5rem;
            margin-bottom: 0.5rem;
            background-color: rgba(255, 105, 180, 0.1);
            border-radius: 0.25rem;
            font-size: 1rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
            border: 2px solid #ff69b4;
            word-break: break-word;
            font-weight: bold;
        }
        #task-list li span {
            margin-right: 1rem;
            flex-grow: 1;
        }
        #task-list li button {
            padding: 0.3rem 0.7rem;
            font-size: 0.7rem; /* Ajuste para pantallas más pequeñas */
            background-color: #6ee7b7;
            color: #ffffff;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-family: 'VT323', monospace;
        }
        #task-list li button:hover {
            background-color: #14b8a6;
        }
        #task-list li .delete-button {
            background-color: #f87171;
            margin-left: 0.5rem;
        }
        #task-list li .delete-button:hover {
            background-color: #b91c1c;
        }
        .completed {
            text-decoration: line-through;
            color: #9ca3af;
        }
        #error-message {
            color: #f87171;
            font-size: 0.8rem; /* Ajuste para pantallas más pequeñas */
            margin-top: 1rem;
            display: none;
        }
        .icon {
            margin-right: 0.5rem;
            display: inline-flex;
            align-items: center;
            height: 1em;
        }
        #completed-tasks-list {
            list-style: none;
            padding: 0;
            margin-top: 2rem;
            width: 100%;
        }
        #completed-tasks-list li {
            padding: 0.9rem 1.5rem;
            margin-bottom: 0.5rem;
            background-color: rgba(255, 105, 180, 0.1);
            border-radius: 0.25rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
            border: 2px solid #ff69b4;
            word-break: break-word;
        }
        #completed-tasks-list h2 {
            font-size: 1.2rem; /* Ajuste para pantallas más pequeñas */
            color: #ff69b4;
            margin-bottom: 1rem;
            text-align: center;
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
        }
        #music-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

        .character {
            display: inline-block;
            width: 50px; /* Ajuste para pantallas más pequeñas */
            height: 50px; /* Ajuste para pantallas más pequeñas */
            background-color: #ddd;
            border-radius: 50%;
            margin: 10px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1rem; /* Ajuste para pantallas más pequeñas */
            color: #333;
            border: 2px solid #aaa;
        }
        #nicolake {
            background-color: #87CEEB;
            color: #00008B;
            border-color: #4682B4;
        }
        #aldana {
            background-color: #FFB6C1;
            color: #DC143C;
            border-color: #FF69B4;
        }

        @media (max-width: 640px) {
            header h1{
                font-size: 2rem;
            }
            header p{
                font-size: 0.7rem
            }
            #task-list li, #task-input, #add-task-button{
                font-size: 0.8rem;
                padding: 0.5rem 1rem;
            }
            #task-list li span{
                margin-right: 0.5rem;
            }
            main {
                width: 95%;
            }
            .character{
                width: 40px;
                height: 40px;
                font-size: 0.8rem;
                margin: 5px;
            }
            #completed-tasks-list h2{
                font-size: 1rem;
            }
            #completed-tasks-list li{
                font-size: 0.8rem;
                padding: 0.5rem 1rem;
            }
        }
        @media (max-width: 320px){
            header h1{
                font-size: 1.5rem;
            }
            #task-list li, #task-input, #add-task-button{
                font-size: 0.7rem;
                padding: 0.3rem 0.5rem;
            }
            #task-list li span{
                margin-right: 0.2rem;
            }
            #completed-tasks-list li{
                font-size: 0.7rem;
                padding: 0.3rem 0.5rem;
            }
        }

        #task-list-container h2 {
            font-size: 1.2rem;
            font-weight: bold;
            color: #6ee7b7;
            padding: 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            display: inline-block;
            text-transform: uppercase;
            text-shadow: 0 0 8px rgba(0, 231, 183, 0.8);
        }

        /* Nuevos estilos para las imágenes de fondo */
        .bg-image {
            display: none;
        }
        footer {
            margin-top: 2rem;
            text-align: center;
            font-size: 0.7rem;
            color: #ffffff;
        }

    </style>
</head>
<body>
    <header>
        <h1>
            <span style="text-decoration: underline;">Bienvenidos</span> a esta nueva aventura<br>
            de Nicolake y Aldana
        </h1>
        <p></p>
    </header>

    <main>
        <input type="text" id="task-input" placeholder="Y ahora qué hacemos?????">
        <button id="add-task-button">Agregar Misión</button>
        <div id="task-list-container">
            <h2>Lista de misiones</h2>
            <ul id="task-list">
            </ul>
        </div>
        <div id="error-message">
            <p>Por favor, ingrese una tarea.</p>
        </div>
        <ul id="completed-tasks-list">
            <h2>Misiones Completadas</h2>
        <ul>
    </main>

    <footer>
        <p>🍳 Creada con cariño y lija, Aldana</p>
    </footer>

    

    <script>
        const taskInput = document.getElementById('task-input');
        const addTaskButton = document.getElementById('add-task-button');
        const taskList = document.getElementById('task-list');
        const errorMessage = document.getElementById('error-message');
        const completedTasksList = document.getElementById('completed-tasks-list');
        

        const heartEmojis = ['❤️', '🧡', '💛', '💚', '💙', '💜'];
        const plantEmojis = ['🌱', '🌿', '☘️', '🌵', '🌴'];
        const foodEmojis = ['🍕', '🍔', '🍣', '🥗', '🍝'];
        const movieEmojis = ['🎬', '🎥', '🍿', '🎞️', '📽️'];
        const sleepEmojis = ['😴', '💤', '🛌', '🌙', '🌚'];
        const cameraEmojis = ['📸', '📹', '🎥', '🎞️', '📽️'];

        let audio;
        let isPlaying = false;

        function getFormattedDate() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            return `<span class="math-inline">\{year\}\-</span>{month}-${day} <span class="math-inline">\{hours\}\:</span>{minutes}:${seconds}`;
        }

        function loadTasks() {
            const savedTasks = localStorage.getItem('tasks');
            const savedCompletedTasks = localStorage.getItem('completedTasks');

            if (savedTasks) {
                const tasks = JSON.parse(savedTasks);
                tasks.forEach(task => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <span>${task.text}</span>
                        <span class="created-at">Creado: ${task.createdAt}</span>
                        ${task.completedAt ? `<span class="completed-at">Completado: ${task.completedAt}</span>` : ''}
                    `;

                    const completeButton = document.createElement('button');
                    completeButton.textContent = 'Completar';
                    completeButton.style.backgroundColor = '#6ee7b7';
                    completeButton.addEventListener('click', () => {
                        listItem.classList.toggle('completed');
                        const completedAtSpan = listItem.querySelector('.completed-at');
                        if (listItem.classList.contains('completed')) {
                            if (!completedAtSpan) {
                                listItem.querySelector('.created-at').insertAdjacentHTML('afterend', `<span class="completed-at">Completado: ${getFormattedDate()}</span>`);
                            }
                            task.completedAt = getFormattedDate();
                            completedTasksList.appendChild(listItem);
                        } else {
                            if (completedAtSpan) {
                                completedAtSpan.remove();
                            }
                            task.completedAt = null;
                            taskList.appendChild(listItem);
                        }
                        saveTasks();
                        saveCompletedTasks();
                        updateDisplay(listItem);
                    });

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Eliminar';
                    deleteButton.classList.add('delete-button');
                    deleteButton.style.backgroundColor = '#f87171';
                    deleteButton.addEventListener('click', () => {
                        listItem.remove();
                        const index = tasks.findIndex(t => t.text === task.text && t.createdAt === task.createdAt);
                        if (index > -1) {
                            tasks.splice(index, 1);
                            saveTasks();
                            saveCompletedTasks();
                        }
                    });

                    listItem.appendChild(completeButton);
                    listItem.appendChild(deleteButton);
                    if (task.completedAt) {
                        listItem.classList.add('completed');
                        completedTasksList.appendChild(listItem);
                    } else {
                        taskList.appendChild(listItem);
                    }
                });
            }

            if (savedCompletedTasks) {
                const completedTasks = JSON.parse(savedCompletedTasks);
                completedTasks.forEach(task => {
                    const listItem = document.createElement('li');
                    listItem.classList.