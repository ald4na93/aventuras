<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Lista de Aventuras Compartida</title>
    <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=VT323&display=swap" rel="stylesheet">
    <style>
        body {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            margin: 0;
            background-color: #000000;
            font-family: 'VT323', monospace;
            color: #ffffff;
            padding-bottom: 70px;
            box-sizing: border-box;
            position: relative;
            overflow-x: hidden;
            /* Fondo de grid */
            background-image:
                linear-gradient(to right, rgba(128, 128, 128, 0.3) 1px, transparent 1px),
                linear-gradient(to bottom, rgba(128, 128, 128, 0.3) 1px, transparent 1px);
            background-size: 40px 40px;
            background-position: 0 0, 0 0;
        }
        header {
            text-align: center;
            margin-bottom: 1rem;
            padding-top: 1rem;
            width: 100%;
        }
        header h1 {
            font-size: 2.5rem; /* Ajuste para pantallas más pequeñas */
            color: #ff69b4;
            margin-bottom: 0.5rem;
            text-shadow: 0 0 8px rgba(255, 105, 180, 0.8);
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
            line-height: 1.2;
        }
        header h1 span {
            text-decoration: underline;
        }
        header p {
            font-size: 0.8rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
        }
        main {
            width: 95%;
            max-width: 400px;
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #task-input {
            padding: 0.7rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            width: 100%;
            margin-right: 0;
            margin-bottom: 0.5rem;
            border: 2px solid #6ee7b7;
            border-radius: 0.25rem;
            background-color: #1f2937;
            color: #ffffff;
            font-family: 'VT323', monospace;
            box-sizing: border-box;
        }
        #add-task-button {
            padding: 0.7rem 1.5rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            background-color: #6ee7b7;
            color: #ffffff;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-family: 'VT323', monospace;
            width: 100%;
            box-sizing: border-box;
            color: #ff69b4;
            text-shadow: 0 0 8px rgba(255, 105, 180, 0.8);
        }
        #add-task-button:hover {
            background-color: #14b8a6;
        }
        #task-list-container {
            width: 100%;
            margin-top: 1rem;
            margin-bottom: 4rem;
            display: flex;
            flex-direction: column;
            align-items: center;
        }
        #task-list {
            list-style: none;
            padding: 0;
            width: 100%;
        }
        #task-list li {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.9rem 1.5rem;
            margin-bottom: 0.5rem;
            background-color: rgba(255, 105, 180, 0.1);
            border-radius: 0.25rem;
            font-size: 1rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
            border: 2px solid #ff69b4;
            word-break: break-word;
            font-weight: bold;
        }
        #task-list li span {
            margin-right: 1rem;
            flex-grow: 1;
        }
        #task-list li button {
            padding: 0.3rem 0.7rem;
            font-size: 0.7rem; /* Ajuste para pantallas más pequeñas */
            background-color: #6ee7b7;
            color: #ffffff;
            border: none;
            border-radius: 0.25rem;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-family: 'VT323', monospace;
        }
        #task-list li button:hover {
            background-color: #14b8a6;
        }
        #task-list li .delete-button {
            background-color: #f87171;
            margin-left: 0.5rem;
        }
        #task-list li .delete-button:hover {
            background-color: #b91c1c;
        }
        .completed {
            text-decoration: line-through;
            color: #9ca3af;
        }
        #error-message {
            color: #f87171;
            font-size: 0.8rem; /* Ajuste para pantallas más pequeñas */
            margin-top: 1rem;
            display: none;
        }
        .icon {
            margin-right: 0.5rem;
            display: inline-flex;
            align-items: center;
            height: 1em;
        }
        #completed-tasks-list {
            list-style: none;
            padding: 0;
            margin-top: 2rem;
            width: 100%;
        }
        #completed-tasks-list li {
            padding: 0.9rem 1.5rem;
            margin-bottom: 0.5rem;
            background-color: rgba(255, 105, 180, 0.1);
            border-radius: 0.25rem;
            font-size: 0.9rem; /* Ajuste para pantallas más pequeñas */
            color: #ffffff;
            border: 2px solid #ff69b4;
            word-break: break-word;
        }
        #completed-tasks-list h2 {
            font-size: 1.2rem; /* Ajuste para pantallas más pequeñas */
            color: #ff69b4;
            margin-bottom: 1rem;
            text-align: center;
            display: inline-block;
            padding: 0.25rem 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
        }
        #music-controls {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-top: 1rem;
            margin-bottom: 1rem;
        }

        .character {
            display: inline-block;
            width: 50px; /* Ajuste para pantallas más pequeñas */
            height: 50px; /* Ajuste para pantallas más pequeñas */
            background-color: #ddd;
            border-radius: 50%;
            margin: 10px;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            font-size: 1rem; /* Ajuste para pantallas más pequeñas */
            color: #333;
            border: 2px solid #aaa;
        }
        #nicolake {
            background-color: #87CEEB;
            color: #00008B;
            border-color: #4682B4;
        }
        #aldana {
            background-color: #FFB6C1;
            color: #DC143C;
            border-color: #FF69B4;
        }

        @media (max-width: 640px) {
            header h1{
                font-size: 2rem;
            }
            header p{
                font-size: 0.7rem
            }
            #task-list li, #task-input, #add-task-button{
                font-size: 0.8rem;
                padding: 0.5rem 1rem;
            }
             #task-list li span{
                margin-right: 0.5rem;
            }
            main {
                width: 95%;
            }
            .character{
                width: 40px;
                height: 40px;
                font-size: 0.8rem;
                margin: 5px;
            }
            #completed-tasks-list h2{
                 font-size: 1rem;
            }
            #completed-tasks-list li{
                font-size: 0.8rem;
                padding: 0.5rem 1rem;
            }
        }
        @media (max-width: 320px){
            header h1{
                font-size: 1.5rem;
            }
             #task-list li, #task-input, #add-task-button{
                font-size: 0.7rem;
                padding: 0.3rem 0.5rem;
            }
             #task-list li span{
                margin-right: 0.2rem;
            }
             #completed-tasks-list li{
                 font-size: 0.7rem;
                 padding: 0.3rem 0.5rem;
            }
        }

        #task-list-container h2 {
            font-size: 1.2rem;
            font-weight: bold;
            color: #6ee7b7;
            padding: 0.5rem;
            background-color: rgba(0, 0, 0, 0.7);
            border-radius: 0.25rem;
            margin-bottom: 1rem;
            display: inline-block;
            text-transform: uppercase;
            text-shadow: 0 0 8px rgba(0, 231, 183, 0.8);
        }

        /* Nuevos estilos para las imágenes de fondo */
        .bg-image {
            display: none;
        }
        footer {
            margin-top: 2rem;
            text-align: center;
            font-size: 0.7rem;
            color: #ffffff;
        }

    </style>
</head>
<body>
    <header>
        <h1>
            <span style="text-decoration: underline;">Bienvenidos</span> a esta nueva aventura<br>
            de Nicolake y Aldana
        </h1>
        <p></p>
    </header>

    <main>
        <input type="text" id="task-input" placeholder="Y ahora qué hacemos?????">
        <button id="add-task-button">Agregar Misión</button>
        <div id="task-list-container">
            <h2>Lista de misiones</h2>
            <ul id="task-list">
            </ul>
        </div>
        <div id="error-message">
            <p>Por favor, ingrese una tarea.</p>
        </div>
        <ul id="completed-tasks-list">
            <h2>Misiones Completadas</h2>
        <ul>
    </main>

    <footer>
        <p>🍳 Creada con cariño y lija, Aldana</p>
    </footer>

    

    <script>
        const taskInput = document.getElementById('task-input');
        const addTaskButton = document.getElementById('add-task-button');
        const taskList = document.getElementById('task-list');
        const errorMessage = document.getElementById('error-message');
        const completedTasksList = document.getElementById('completed-tasks-list');
       

        const heartEmojis = ['❤️', '🧡', '💛', '💚', '💙', '💜'];
        const plantEmojis = ['🌱', '🌿', '☘️', '🌵', '🌴'];
        const foodEmojis = ['🍕', '🍔', '🍣', '🥗', '🍝', '🍷'];
        const movieEmojis = ['🎬', '🎥', '🍿', '🎞️', '📽️'];
        const sleepEmojis = ['😴', '💤', '🛌', '🌙', '🌚'];
        const cameraEmojis = ['📸', '📹', '🎥', '🎞️', '📽️'];

        let audio;
        let isPlaying = false;

        // Supabase configuration
        const SUPABASE_URL = 'https://ymjwxtplspzlrubomexg.supabase.co'; // Replace with your Supabase URL
        const SUPABASE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inltand4dHBsc3B6bHJ1Ym9tZXhnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQzMzY4NDksImV4cCI6MjA1OTkxMjg0OX0.UQrCoDBqrjJsiPzP_cZcw5Tt4HhPZQOnpNUqS5eqYK4';   // Replace with your Supabase Key
        const { createClient } = supabase;
        const supabaseClient = createClient(SUPABASE_URL, SUPABASE_KEY);

        async function getFormattedDate() {
            const now = new Date();
            const year = now.getFullYear();
            const month = String(now.getMonth() + 1).padStart(2, '0');
            const day = String(now.getDate()).padStart(2, '0');
            const hours = String(now.getHours()).padStart(2, '0');
            const minutes = String(now.getMinutes()).padStart(2, '0');
            const seconds = String(now.getSeconds()).padStart(2, '0');
            return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
        }

        async function loadTasks() {
            try {
                const { data: tasks, error: tasksError } = await supabaseClient
                    .from('tasks')
                    .select('*')
                    .order('created_at', { ascending: true });

                if (tasksError) {
                    console.error('Error fetching tasks:', tasksError);
                    return; // Stop processing if there's an error
                }

                const { data: completedTasks, error: completedTasksError } = await supabaseClient
                    .from('tasks')
                    .select('*')
                    .eq('completed', true)
                    .order('completed_at', { ascending: true });

                if (completedTasksError) {
                    console.error('Error fetching completed tasks:', completedTasksError);
                    return; // Stop processing if there's an error
                }

                taskList.innerHTML = ''; // Clear the task list
                completedTasksList.innerHTML = '<h2>Misiones Completadas</h2>'; // Clear completed tasks list, keep heading

                tasks.forEach(task => {
                    const listItem = document.createElement('li');
                    listItem.innerHTML = `
                        <span>${task.text}</span>
                        <span class="created-at">Creado: ${task.created_at}</span>
                        ${task.completed_at ? `<span class="completed-at">Completado: ${task.completed_at}</span>` : ''}
                    `;
                    const completeButton = document.createElement('button');
                    completeButton.textContent = 'Completar';
                    completeButton.style.backgroundColor = '#6ee7b7';
                    completeButton.addEventListener('click', () => {
                        toggleTaskCompletion(task.id, listItem);
                    });

                    const deleteButton = document.createElement('button');
                    deleteButton.textContent = 'Eliminar';
                    deleteButton.classList.add('delete-button');
                    deleteButton.style.backgroundColor = '#f87171';
                    deleteButton.addEventListener('click', () => {
                        deleteTask(task.id, listItem);
                    });

                    listItem.appendChild(completeButton);
                    listItem.appendChild(deleteButton);

                    if (task.completed) {
                        listItem.classList.add('completed');
                        completedTasksList.appendChild(listItem);
                    } else {
                        taskList.appendChild(listItem);
                    }
                });

                completedTasks.forEach(task => {
                    const listItem = document.createElement('li');
                    listItem.classList.add('completed');
                    listItem.innerHTML = `
                        <span>${task.text}</span>
                        <span class="created-at">Creado: ${task.created_at}</span>
                        <span class="completed-at">Completado: ${task.completed_at}</span>
                    `;
                    completedTasksList.appendChild(listItem);
                });

            } catch (error) {
                console.error('Error loading tasks:', error);
            }
        }


        async function toggleTaskCompletion(taskId, listItem) {
           try {
                const completedAtSpan = listItem.querySelector('.completed-at');
                let completedValue = !listItem.classList.contains('completed');
                const updates = {
                    completed: completedValue,
                    completed_at: completedValue ? await getFormattedDate() : null, // set completed_at only if completed is true
                };

                const { data, error } = await supabaseClient
                    .from('tasks')
                    .update(updates)
                    .eq('id', taskId);

                if (error) {
                    console.error('Error updating task:', error);
                    return;
                }

                if (completedValue) {
                    listItem.classList.add('completed');
                     if (!completedAtSpan) {
                         listItem.querySelector('.created-at').insertAdjacentHTML('afterend', `<span class="completed-at">Completado: ${updates.completed_at}</span>`);
                     }
                    completedTasksList.appendChild(listItem);
                } else {
                    listItem.classList.remove('completed');
                    if (completedAtSpan) {
                        completedAtSpan.remove();
                    }
                    taskList.appendChild(listItem);
                }
                updateDisplay(listItem);

            } catch (error) {
                console.error('Error toggling task completion:', error);
            }
        }


        async function deleteTask(taskId, listItem) {
            try {
                const { error } = await supabaseClient
                    .from('tasks')
                    .delete()
                    .eq('id', taskId);

                if (error) {
                    console.error('Error deleting task:', error);
                    return;
                }

                listItem.remove();
            } catch (error) {
                console.error('Error deleting task:', error);
            }
        }

        function updateDisplay(listItem) {
            const completeButton = listItem.querySelector('button:nth-child(2)');
            if (!completeButton) return;
            if (listItem.classList.contains('completed')) {
                completeButton.textContent = 'Deshacer';
            } else {
                completeButton.textContent = 'Completar';
            }
        }

        function getRandomHeartEmoji() {
            return heartEmojis[Math.floor(Math.random() * heartEmojis.length)];
        }

        function getRandomPlantEmoji() {
            return plantEmojis[Math.floor(Math.random() * plantEmojis.length)];
        }
        function getRandomFoodEmoji() {
            return foodEmojis[Math.floor(Math.random() * foodEmojis.length)];
        }

        function getRandomMovieEmoji() {
            return movieEmojis[Math.floor(Math.random() * movieEmojis.length)];
        }

        function getRandomSleepEmoji() {
            return sleepEmojis[Math.floor(Math.random() * sleepEmojis.length)];
        }

        function getRandomCameraEmoji() {
            return cameraEmojis[Math.floor(Math.random() * cameraEmojis.length)];
        }

        function createFloatingHeart() {
            const heart = document.createElement('span');
            const emojiArray = [getRandomHeartEmoji(), getRandomFoodEmoji(), getRandomMovieEmoji(),  getRandomCameraEmoji()];
            heart.textContent = emojiArray[Math.floor(Math.random() * emojiArray.length)];
            heart.style.position = 'fixed';
            heart.style.left = `${Math.random() * 100}vw`;
            heart.style.top = `${Math.random() * 100}vh`;
            heart.style.fontSize = `${Math.random() * 2 + 1}rem;`;
            heart.style.zIndex = '-1';
            document.body.appendChild(heart);

            const animationDuration = Math.random() * 6 + 8;
            heart.style.transition = `transform ${animationDuration}s linear, opacity ${animationDuration}s linear`;

            setTimeout(() => {
                heart.style.transform = 'translateY(-100vh) rotate(${Math.random() * 360}deg)';
                heart.style.opacity = '0';
                setTimeout(() => heart.remove(), animationDuration * 1000);
            }, 100);
        }

        for (let i = 0; i < 20; i++) {
            createFloatingHeart();
        }

        setInterval(createFloatingHeart, 2000);

       

        loadTasks();

        addTaskButton.addEventListener('click', async () => {
            const taskText = taskInput.value.trim();

            if (taskText === '') {
                errorMessage.style.display = 'block';
                return;
            }

            errorMessage.style.display = 'none';

            const createdAt = await getFormattedDate();
            const task = {
                text: taskText,
                created_at: createdAt,
                completed: false,
                completed_at: null,
            };

            try {
                const { data, error } = await supabaseClient
                    .from('tasks')
                    .insert([task]);

                if (error) {
                    console.error('Error adding task:', error);
                    return;
                }

                const newTask = data[0]; // Get the newly created task from the response

                const listItem = document.createElement('li');
                listItem.innerHTML = `
                    <span>${newTask.text}</span>
                    <span class="created-at">Creado: ${newTask.created_at}</span>
                `;

                const completeButton = document.createElement('button');
                completeButton.textContent = 'Completar';
                completeButton.style.backgroundColor = '#6ee7b7';
                completeButton.addEventListener('click', () => {
                    toggleTaskCompletion(newTask.id, listItem);
                });

                const deleteButton = document.createElement('button');
                deleteButton.textContent = 'Eliminar';
                deleteButton.classList.add('delete-button');
                deleteButton.style.backgroundColor = '#f87171';
                deleteButton.addEventListener('click', () => {
                    deleteTask(newTask.id, listItem);
                });

                listItem.appendChild(completeButton);
                listItem.appendChild(deleteButton);
                taskList.appendChild(listItem);

                taskInput.value = ''; // Clear the input
                loadTasks()

            } catch (error) {
                console.error('Error adding task:', error);
            }
        });

        taskInput.addEventListener('keydown', (event) => {
            if (event.key === 'Enter') {
                addTaskButton.click();
            }
        });
    </script>
</body>
</html>
